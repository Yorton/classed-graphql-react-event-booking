{"version":3,"sources":["context/auth-context.js","pages/Auth.js","components/Modal/Modal.js","components/Backdrop/Backdrop.js","components/Events/EventList/EventItem/EventItem.js","components/Events/EventList/EventList.js","components/Spinner/Spinner.js","pages/Events.js","components/Bookings/BookingList/BookingList.js","components/Bookings/BookingChart/BookingChart.js","components/Bookings/BookingControls/BookingControls.js","pages/Bookings.js","components/Navigation/MainNavigation.js","App.js","index.js"],"names":["React","createContext","token","userId","login","tokenExpiration","logout","AuthPage","props","state","isLogin","switchModeHandler","setState","prevState","submitHandler","event","preventDefault","email","emailEl","current","value","password","passwordEl","trim","length","requestBody","query","variables","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","data","context","catch","err","console","log","createRef","className","onSubmit","this","htmlFor","type","id","ref","onClick","Component","contextType","AuthContext","modal","title","children","canCancel","onCancel","canConfirm","onConfirm","confirmText","backdrop","eventItem","key","eventId","price","Date","date","toLocaleDateString","creator","onDetail","bind","eventList","events","map","_id","authUserId","onViewDetail","spinner","EventsPage","creating","isLoading","selectedEvent","isActive","startCreateEventHandler","modalCancelHandler","modalConfirmHandler","titleElRef","priceElRef","dateElRef","description","descriptionElRef","desc","updatedEvents","push","createEvent","showDetailHandler","find","e","bookEventHandler","fetchEvents","Fragment","rows","bookingList","bookings","booking","createdAt","onDelete","BOOKINGS_BUCKETS","min","max","bookingChart","chartData","labels","datasets","values","bucket","filterdBookingsCount","reduce","prev","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","style","textAlign","bookingControl","activeOutputType","onChange","BookingsPage","outputType","fetchBookings","deleteBookingHandler","bookingId","preState","filter","changeOutputTypeHandler","content","mainNavigation","Consumer","to","App","Provider","from","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13dd8b34.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default React.createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: (token, userId, tokenExpiration)=>{},\r\n    logout: ()=>{}\r\n});","import React, {Component} from 'react';\r\nimport './Auth.css';\r\nimport { json } from 'body-parser';\r\nimport AuthContext from '../context/auth-context';\r\n\r\nclass AuthPage extends Component{\r\n\r\n    state = {\r\n        isLogin: true\r\n    };\r\n\r\n    static contextType = AuthContext;\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.emailEl = React.createRef();\r\n        this.passwordEl = React.createRef();\r\n\r\n    }\r\n\r\n    switchModeHandler = () =>{\r\n\r\n        this.setState(prevState =>{\r\n            return {isLogin: !prevState.isLogin};\r\n        });\r\n    } \r\n\r\n\r\n    submitHandler = (event) =>{\r\n\r\n        event.preventDefault();\r\n\r\n        const email = this.emailEl.current.value;\r\n        const password = this.passwordEl.current.value;\r\n\r\n        if (email.trim().length === 0 || password.trim().length === 0) return;\r\n\r\n        //old\r\n        // let requestBody = {\r\n        //     query: `\r\n        //         query {\r\n        //             login(email: \"${email}\", password: \"${password}\"){\r\n        //                 userId\r\n        //                 token\r\n        //                 tokenExpiration\r\n        //             }\r\n        //         }\r\n        //     `\r\n        // };\r\n\r\n        let requestBody = {\r\n            query: `\r\n                query Login($email: String!, $password: String!) {\r\n                    login(email: $email, password: $password){\r\n                        userId\r\n                        token\r\n                        tokenExpiration\r\n                    }\r\n                }\r\n            `,\r\n            variables:{\r\n                email: email,\r\n                password, password\r\n            }\r\n        };\r\n\r\n        if (!this.state.isLogin){\r\n\r\n            //old\r\n            // requestBody = {\r\n            //     query: `\r\n            //         mutation {\r\n            //             createUser(userInput: {email: \"${email}\", password: \"${password}\"}){\r\n            //                 _id\r\n            //                 email\r\n            //             }\r\n            //         }\r\n            //     `\r\n            // };\r\n\r\n            requestBody = {\r\n                query: `\r\n                    mutation CreateUser($email: String!, $password: String!){\r\n                        createUser(userInput: {email: $email, password: $password}){\r\n                            _id\r\n                            email\r\n                        }\r\n                    }\r\n                `,\r\n                variables:{\r\n                    email: email,\r\n                    password: password\r\n                }\r\n            };\r\n        }\r\n\r\n       \r\n\r\n        fetch('/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201){\r\n                throw new Error('Failed!');\r\n            }\r\n\r\n            return res.json();\r\n        })\r\n        .then(resData =>{\r\n            \r\n            if (resData.data.login.token){\r\n\r\n                this.context.login(\r\n                    resData.data.login.token,\r\n                    resData.data.login.userId,\r\n                    resData.data.login.tokenExpiration\r\n                );\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        return <form className=\"auth-form\" onSubmit={this.submitHandler}>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"email\">E-Mail</label>\r\n                <input type=\"email\" id=\"email\" ref={this.emailEl}></input>\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" ref={this.passwordEl}></input>\r\n            </div>\r\n            <div className=\"form-actions\">\r\n                <button type=\"submit\">Submit</button>\r\n                <button type=\"button\" onClick={this.switchModeHandler}> \r\n                    Switch to {this.state.isLogin ? 'Signup' : 'Login'}\r\n                </button>\r\n            </div>\r\n        </form>;\r\n    }\r\n}\r\n\r\nexport default AuthPage;","import React from 'react';\r\nimport './Modal.css';\r\n\r\nconst modal = (props) =>(\r\n    <div className=\"modal\">\r\n        <header className=\"modal__header\">\r\n            <h1>{props.title}</h1>\r\n        </header>\r\n        <section className=\"modal__content\">\r\n            {props.children}\r\n        </section>\r\n        <section className=\"modal__actions\">\r\n            {props.canCancel && (<button className=\"btn\" onClick={props.onCancel}>Cancel</button>)}\r\n            {props.canConfirm && (\r\n                <button className=\"btn\" onClick={props.onConfirm}>\r\n                {props.confirmText}\r\n                </button>\r\n            )}\r\n        </section>\r\n\r\n    </div>\r\n);\r\n\r\nexport default modal;","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props=> (\r\n        <div className=\"backdrop\"></div>\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport './EventItem.css';\r\n\r\nconst eventItem = props =>(\r\n    <li key={props.eventId} className=\"events__list-item\">\r\n        <div>\r\n            <h1>{props.title}</h1>\r\n            <h2>${props.price} - {new Date(props.date).toLocaleDateString()}</h2>\r\n        </div>\r\n        <div>\r\n            {\r\n                props.userId === props.creator\r\n                ? (<p>your the owner of this event.</p>)\r\n                : (<button className=\"btn\" onClick={props.onDetail.bind(this, props.eventId)}>View Details</button>)\r\n            }\r\n        </div>\r\n    </li>\r\n);\r\n\r\nexport default eventItem;","import React from 'react';\r\nimport EventItem from './EventItem/EventItem';\r\nimport './EventList.css';\r\n\r\n\r\nconst eventList = props =>{\r\n    const events = props.events.map(event =>{\r\n        return <EventItem \r\n                key={event._id} \r\n                eventId={event._id} \r\n                title={event.title} \r\n                price={event.price}\r\n                date={event.date}\r\n                userId={props.authUserId} \r\n                creator={event.creator._id}\r\n                onDetail={props.onViewDetail}\r\n                />\r\n    });\r\n\r\n    return (\r\n        <ul className=\"event__list\">\r\n            {events}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default eventList;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst spinner = ()=> (\r\n    <div className=\"spinner\">\r\n        <div className=\"lds-dual-ring\"></div>\r\n    </div>\r\n);\r\n\r\nexport default spinner;","import React, {Component} from 'react';\r\nimport Modal from '../components/Modal/Modal';\r\nimport Backdrop from '../components/Backdrop/Backdrop';\r\nimport EventList from '../components/Events/EventList/EventList';\r\nimport Spinner from '../components/Spinner/Spinner';\r\nimport AuthContext from '../context/auth-context';\r\nimport './Events.css';\r\n\r\n\r\nclass EventsPage extends Component{\r\n\r\n    state = {\r\n        creating: false,\r\n        events: [],\r\n        isLoading: false,\r\n        selectedEvent: null\r\n     };\r\n\r\n    isActive = true;\r\n\r\n    static contextType = AuthContext;\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.titleElRef = React.createRef();\r\n        this.priceElRef = React.createRef();\r\n        this.dateElRef = React.createRef();\r\n        this.descriptionElRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount(){\r\n  \r\n        this.fetchEvents();\r\n    }\r\n\r\n    startCreateEventHandler = () =>{\r\n        this.setState({creating: true});\r\n    }\r\n\r\n    modalCancelHandler = ()=>{\r\n        this.setState({creating: false, selectedEvent: null});\r\n    }\r\n\r\n\r\n    modalConfirmHandler = ()=>{\r\n        this.setState({creating: false});\r\n\r\n        const title = this.titleElRef.current.value;\r\n        const price = +this.priceElRef.current.value;\r\n        const date = this.dateElRef.current.value;\r\n        const description = this.descriptionElRef.current.value;\r\n\r\n        if (title.trim().length === 0\r\n        || price <= 0\r\n        || date.trim().length === 0\r\n        || description.trim().length === 0){\r\n            return;\r\n        }\r\n\r\n        const event = {title,price,date,description};\r\n        console.log(event);\r\n\r\n        //old\r\n        // const requestBody = {\r\n        //     query: `\r\n        //         mutation {\r\n        //             createEvent(eventInput: {title: \"${title}\", price: ${price}, date: \"${date}\", description: \"${description}\"}){\r\n        //                 _id\r\n        //                 title\r\n        //                 description\r\n        //                 price\r\n        //                 date\r\n        //             }\r\n        //         }\r\n        //     `\r\n        // };\r\n\r\n        const requestBody = {\r\n            query: `\r\n                mutation CreateEvent($title: String!, $price: Float!, $date: String!, $desc: String!){\r\n                    createEvent(eventInput: {title: $title, price: $price, date: $date, description: $desc}){\r\n                        _id\r\n                        title\r\n                        description\r\n                        price\r\n                        date\r\n                    }\r\n                }\r\n            `,\r\n            variables:{\r\n                title: title,\r\n                desc: description,\r\n                price: price,\r\n                date: date\r\n            }\r\n        };\r\n\r\n        const token = this.context.token;\r\n    \r\n        fetch('/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer '+ token\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201){\r\n                throw new Error('Failed!');\r\n            }\r\n\r\n            return res.json();\r\n        })\r\n        .then(resData =>{\r\n\r\n            this.setState(prevState => {\r\n\r\n                const updatedEvents = [...prevState.events];\r\n\r\n                updatedEvents.push({\r\n                        _id: resData.data.createEvent._id,\r\n                        title: resData.data.createEvent.title,\r\n                        description: resData.data.createEvent.description,\r\n                        price: resData.data.createEvent.price,\r\n                        date: resData.data.createEvent.date,\r\n                        creator: {\r\n                            _id: this.context.userId\r\n                        }\r\n                });\r\n\r\n                return {events: updatedEvents};\r\n            });\r\n \r\n            //this.fetchEvents(); //too slow\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    fetchEvents(){\r\n\r\n        this.setState({isLoading: true});\r\n\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                    events{\r\n                        _id\r\n                        title\r\n                        description\r\n                        price\r\n                        date\r\n                        creator{\r\n                            _id\r\n                            email\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        };\r\n\r\n        const token = this.context.token;\r\n    \r\n        fetch('/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201){\r\n                throw new Error('Failed!');\r\n            }\r\n\r\n            return res.json();\r\n        })\r\n        .then(resData =>{\r\n    \r\n            const events = resData.data.events;\r\n\r\n            if (this.isActive){\r\n                this.setState({events: events, isLoading: false});\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            if (this.isActive){\r\n                this.setState({isLoading: false});\r\n            }\r\n        });\r\n    }\r\n\r\n    showDetailHandler = eventId => {\r\n\r\n        this.setState(prevState => {\r\n\r\n            const selectedEvent = prevState.events.find(e => e._id === eventId);\r\n             return {selectedEvent: selectedEvent};\r\n        });\r\n\r\n    }\r\n\r\n    bookEventHandler = () => {\r\n\r\n        if (!this.context.token){\r\n            this.setState({selectedEvent: null});\r\n            return;\r\n        }\r\n\r\n        //old\r\n        // const requestBody = {\r\n        //     query: `\r\n        //         mutation {\r\n        //             bookEvent(eventId: \"${this.state.selectedEvent._id}\"){\r\n        //                 _id\r\n        //                createdAt\r\n        //                updatedAt\r\n        //             }\r\n        //         }\r\n        //     `\r\n        // };\r\n\r\n        const requestBody = {\r\n            query: `\r\n                mutation BookEvent($id: ID!){\r\n                    bookEvent(eventId: $id){\r\n                        _id\r\n                       createdAt\r\n                       updatedAt\r\n                    }\r\n                }\r\n            `,\r\n            variables:{\r\n                id: this.state.selectedEvent._id\r\n            }\r\n        };\r\n\r\n        const token = this.context.token;\r\n    \r\n        fetch('/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer '+ token\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201){\r\n                throw new Error('Failed!');\r\n            }\r\n\r\n            return res.json();\r\n        })\r\n        .then(resData =>{\r\n   \r\n            console.log(resData);\r\n            this.setState({selectedEvent: null});//close modal\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.isActive = false;\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {(this.state.creating || this.state.selectedEvent) && <Backdrop/>}\r\n                {this.state.creating && <Modal title=\"Add Event\" \r\n                canCancel \r\n                canConfirm \r\n                onCancel={this.modalCancelHandler} \r\n                onConfirm={this.modalConfirmHandler}\r\n                confirmText = \"Confirm\"\r\n                >\r\n                    <form>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"title\">Title</label>\r\n                            <input type=\"text\" id=\"title\" ref={this.titleElRef}></input>\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"price\">Price</label>\r\n                            <input type=\"number\" id=\"price\" ref={this.priceElRef}></input>\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"date\">Date</label>\r\n                            <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef}></input>\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"description\">Description</label>\r\n                            <textarea id=\"description\" rows=\"4\" ref={this.descriptionElRef}></textarea>\r\n                        </div>\r\n                    </form>\r\n                </Modal>}\r\n\r\n\r\n                {this.state.selectedEvent && (\r\n                     <Modal title={this.state.selectedEvent.title} \r\n                     canCancel \r\n                     canConfirm \r\n                     onCancel={this.modalCancelHandler} \r\n                     onConfirm={this.bookEventHandler}\r\n                     confirmText = {this.context.token ? \"Book\" : \"Confirm\"}\r\n                     >\r\n                        <h1>{this.state.selectedEvent.title}</h1>\r\n                        <h2>${this.state.selectedEvent.price} - {new Date(this.state.selectedEvent.date).toLocaleDateString()}</h2>\r\n                        <p>{this.state.selectedEvent.description}</p>\r\n                     </Modal>\r\n                )}\r\n\r\n                {this.context.token && (\r\n                      <div className=\"events-control\">\r\n                      <p>Share your own event</p>\r\n                      <button className=\"btn\" onClick={this.startCreateEventHandler}>\r\n                          Create Event\r\n                      </button>\r\n                  </div>\r\n                )}\r\n                {\r\n                    this.state.isLoading \r\n                    ? (<Spinner/>)\r\n                    : (<EventList \r\n                        events={this.state.events} \r\n                        authUserId={this.context.userId} \r\n                        onViewDetail={this.showDetailHandler}\r\n                        />)\r\n                }\r\n               \r\n            </React.Fragment>\r\n            );\r\n    }\r\n}\r\n\r\nexport default EventsPage;","import React from 'react';\r\nimport './BookingList.css';\r\n\r\nconst bookingList = props => (\r\n    <ul className=\"bookings__list\">\r\n        {props.bookings.map(booking => {\r\n            return (\r\n                <li key={booking._id} className=\"bookings__item\"> \r\n                    <div className=\"bookings__item-data\">\r\n                        {booking.event.title} - {' '}\r\n                        {new Date(booking.createdAt).toLocaleDateString()}\r\n                    </div>\r\n                    <div className=\"bookings__item-actions\">\r\n                        <button className=\"btn\" onClick={props.onDelete.bind(this, booking._id)}>Cancel</button>\r\n                    </div>\r\n                </li>\r\n            );\r\n        })}\r\n    </ul>\r\n);\r\n\r\nexport default bookingList;","import React from 'react';\r\nimport './BookingChart.css';\r\nimport {Bar as BarChart} from 'react-chartjs';\r\n\r\nconst BOOKINGS_BUCKETS = {\r\n    'Cheap': {\r\n        min: 0,\r\n        max: 100\r\n    },\r\n    'Normal': {\r\n        min: 100,\r\n        max: 200\r\n    },\r\n    'Expensive': {\r\n        min: 200,\r\n        max: 10000000\r\n    }\r\n};\r\n\r\nconst bookingChart = props => {\r\n\r\n    const chartData = {labels: [], datasets: []};//refer to react-chartjs/bar.js\r\n\r\n    let values = [];\r\n\r\n    for (const bucket in BOOKINGS_BUCKETS){\r\n\r\n        const filterdBookingsCount = props.bookings.reduce((prev, current)=>{\r\n\r\n            if (current.event.price > BOOKINGS_BUCKETS[bucket].min\r\n             && current.event.price < BOOKINGS_BUCKETS[bucket].max){\r\n                return prev + 1;\r\n            }else{\r\n                return prev;\r\n            }\r\n        }, 0);\r\n\r\n        values.push(filterdBookingsCount);\r\n        chartData.labels.push(bucket);\r\n        chartData.datasets.push({\r\n            //label: 'My First dataset',\r\n            backgroundColor: 'rgba(255,99,132,0.2)',\r\n            borderColor: 'rgba(255,99,132,1)',\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n            hoverBorderColor: 'rgba(255,99,132,1)',\r\n            data: values//[filterdBookingsCount]\r\n        });\r\n\r\n        console.log(values);\r\n\r\n        values = [...values];       //ex:[1,2,3]\r\n        values[values.length-1] = 0;//ex:[0,0,0]\r\n    }\r\n\r\n    // chartData.datasets.push({\r\n    //     //label: 'My First dataset',\r\n    //     backgroundColor: 'rgba(255,99,132,0.2)',\r\n    //     borderColor: 'rgba(255,99,132,1)',\r\n    //     borderWidth: 1,\r\n    //     hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n    //     hoverBorderColor: 'rgba(255,99,132,1)',\r\n    //     data: values//[filterdBookingsCount]\r\n    // });\r\n\r\n    return  (\r\n        <div style={{textAlign:'center'}}>\r\n            <BarChart data={chartData} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default bookingChart;","import React from 'react';\r\nimport './BookingControls.css';\r\n\r\nconst bookingControl = props =>{\r\n    return (\r\n        <div className=\"bookings-control\">\r\n            <button className={props.activeOutputType === 'list' ? 'active' : ''}\r\n                onClick={props.onChange.bind(this, 'list')}>\r\n                List\r\n            </button>\r\n            <button className={props.activeOutputType === 'chart' ? 'active' : ''}\r\n                onClick={props.onChange.bind(this, 'chart')}>\r\n                Chart\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default bookingControl;","import React, {Component} from 'react';\r\nimport Spinner from '../components/Spinner/Spinner';\r\nimport AuthContext from '../context/auth-context';\r\nimport BookingList from '../components/Bookings/BookingList/BookingList';\r\nimport BookingChart from '../components/Bookings/BookingChart/BookingChart';\r\nimport BookingControls from '../components/Bookings/BookingControls/BookingControls';\r\n\r\nclass BookingsPage extends Component{\r\n\r\n    state = {\r\n        isLoading: false,\r\n        bookings: [],\r\n        outputType: 'list'\r\n    };\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount(){\r\n\r\n        this.fetchBookings();\r\n    }\r\n\r\n    fetchBookings = () => {\r\n\r\n        this.setState({isLoading: true});\r\n\r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                    bookings{\r\n                        _id\r\n                        createdAt\r\n                        event{\r\n                            _id\r\n                            title\r\n                            date\r\n                            price\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n        };\r\n\r\n        const token = this.context.token;\r\n    \r\n        fetch('/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer '+ token\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201){\r\n                throw new Error('Failed!');\r\n            }\r\n\r\n            return res.json();\r\n        })\r\n        .then(resData =>{\r\n  \r\n            const bookings = resData.data.bookings;\r\n            this.setState({bookings: bookings, isLoading: false});\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            this.setState({isLoading: false});\r\n        });\r\n    }\r\n\r\n\r\n    deleteBookingHandler = bookingId =>{\r\n\r\n        this.setState({isLoading: true});\r\n\r\n        //old\r\n        // const requestBody = {\r\n        //     query: `\r\n        //         mutation {\r\n        //             cancelBooking(bookingId: \"${bookingId}\"){\r\n        //                 _id\r\n        //                 title\r\n        //             }\r\n        //         }\r\n        //     `\r\n        // };\r\n\r\n        const requestBody = {\r\n            query: `\r\n                mutation CancelBooking($id: ID!){\r\n                    cancelBooking(bookingId: $id){\r\n                        _id\r\n                        title\r\n                    }\r\n                }\r\n            `,\r\n            variables: {\r\n                id: bookingId\r\n            }\r\n        };\r\n\r\n        const token = this.context.token;\r\n    \r\n        fetch('/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer '+ token\r\n            }\r\n        })\r\n        .then(res => {\r\n            if (res.status !== 200 && res.status !== 201){\r\n                throw new Error('Failed!');\r\n            }\r\n\r\n            return res.json();\r\n        })\r\n        .then(resData =>{\r\n    \r\n            this.setState(preState => {\r\n\r\n                const updatedBookings = preState.bookings.filter(booking => {\r\n                    return booking._id !== bookingId;\r\n                });\r\n\r\n                return {bookings: updatedBookings, isLoading: false};\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            this.setState({isLoading: false});\r\n        });\r\n    }\r\n\r\n    changeOutputTypeHandler = outputType => {\r\n    \r\n        if (outputType === 'list'){\r\n            this.setState({outputType: 'list'});\r\n        }else{\r\n            this.setState({outputType: 'chart'});\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        let content = <Spinner/>;\r\n        if (!this.state.isLoading ){\r\n            content = (\r\n                <React.Fragment>\r\n                    <BookingControls activeOutputType={this.state.outputType}\r\n                    onChange={this.changeOutputTypeHandler}\r\n                    />\r\n                    <div>\r\n                       {\r\n                           this.state.outputType === 'list'\r\n                           ? \r\n                           (\r\n                                <BookingList bookings={this.state.bookings} onDelete={this.deleteBookingHandler}/>\r\n                           )\r\n                           :\r\n                           (\r\n                                <BookingChart bookings={this.state.bookings}/>\r\n                           )\r\n                       }\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {content}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookingsPage;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './MainNavigation.css';\r\nimport AuthContext from '../../context/auth-context';\r\n\r\nconst mainNavigation = props =>(\r\n\r\n    <AuthContext.Consumer>\r\n        {(context)=>{\r\n            return(\r\n                <header className=\"main-navigation\">\r\n                    <div className=\"main-navigation__logo\">\r\n                        <h1>EasyEvent</h1>\r\n                    </div>\r\n                    <nav className=\"main-navigation__items\">\r\n                        <ul>\r\n                            {!context.token && (\r\n                                <li><NavLink to=\"/auth\">Authenticate</NavLink></li>\r\n                            )}\r\n                            <li><NavLink to=\"/events\">Events</NavLink></li>\r\n                            {context.token && (\r\n                                <React.Fragment>\r\n                                    <li><NavLink to=\"/bookings\">Bookings</NavLink></li>\r\n                                    <li><button onClick={context.logout}>Logout</button></li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </ul>\r\n                    </nav>\r\n                </header>\r\n            );\r\n        }}\r\n    </AuthContext.Consumer>\r\n   \r\n);\r\n\r\nexport default mainNavigation;","import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter, Route, Redirect, Switch} from 'react-router-dom';\nimport AuthPage from './pages/Auth';\nimport EventsPage from './pages/Events';\nimport BookingsPage from './pages/Bookings';\nimport MainNavigation from './components/Navigation/MainNavigation';\nimport AuthContext from './context/auth-context';\n\nclass App extends Component {\n\n  state = {\n    token: null,\n    userId: null\n  }\n\n  login = (token, userId, tokenExpiration)=>{\n    this.setState({token: token, userId: userId});\n  }\n\n  logout = ()=>{\n    this.setState({token: null, userId: null});\n  }\n\n\n  render(){\n    return (\n      <BrowserRouter>\n        <React.Fragment>\n          <AuthContext.Provider value={{\n            token: this.state.token, \n            userId: this.state.userId, \n            login: this.login, \n            logout: this.logout\n            }}>\n            <MainNavigation/>\n            <main className=\"main-content\">\n              <Switch>\n                \n                {this.state.token && <Redirect from=\"/\" to=\"/events\" exact></Redirect>}\n                {this.state.token && <Redirect from=\"/auth\" to=\"/events\" exact></Redirect>}\n                {!this.state.token && (\n                  <Route path=\"/auth\" component={AuthPage} ></Route>\n                )}\n                <Route path=\"/events\" component={EventsPage} ></Route>\n                {this.state.token && (\n                  <Route path=\"/bookings\" component={BookingsPage} ></Route>\n                )}\n\n                {!this.state.token && <Redirect to=\"/auth\" exact></Redirect>}\n              </Switch>\n            </main>\n          </AuthContext.Provider>\n        </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}